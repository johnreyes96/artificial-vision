# -*- coding: utf-8 -*-
"""RGBvsHSVvsLAB.ipynb

Automatically generated by Colaboratory.
"""

# BGR
""" Ejercicio células """

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/celulas.png',cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# Red
R = imagenEnt[:,:,0]
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)


# Umbralización
# Green
mask = R
umbral = 255
mask[G <= umbral] = 0

mask = B
umbral = 255
mask[B >= umbral] = 0

mask = G
umbral = 200
mask[B >= umbral] = 255



# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
cv2_imshow(resultado)

"""# BGR
Ejercicio células
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/celulas.png',cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# Red
R = imagenEnt[:,:,0]
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)


# Umbralización
mask = R
umbral = 255
mask[G <= umbral] = 0

mask = B
umbral = 30
mask[G <= umbral] = 0

mask = G
umbral = 210
mask[(B > umbral) & (G <= 210)] = 150



# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
cv2_imshow(resultado)

"""# RGB
Ejercicio de los bananos
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/bananos.png',cv2.IMREAD_COLOR)
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# Red
R = imagenEnt[:,:,0]
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)


# Umbralización
mask = R
umbral = 110
mask[B > umbral] = 0
mask[B <= umbral] = 255

mask = G
mask[B > umbral] = 0
mask[B <= umbral] = 255

mask = B
mask[B <= umbral] = 255
mask[B > umbral] = 0
mask[G == 255] = 255



# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
cv2_imshow(resultado)

"""# RGB
Ejercicio de los endosomas
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/endosomas.jpg',cv2.IMREAD_COLOR)
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
print("Imagen original")
cv2_imshow(imagenEnt)

# Endosomas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:,:,0]
# Green
G = endosoma[:,:,1]
# Blue
B = endosoma[:,:,2]

colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)

# Umbralización
# Green
mask = G
umbral = 255
mask[R <= umbral] = 0
# Blue
mask = B
mask[R <= umbral] = 0
# mask[R > 125] = 255

# Mostrar resultado
resultado = (np.dstack((R,G,R))).astype(np.float64)
print("\n\nEndosomas")
cv2_imshow(resultado)



# Endosomas
core = np.copy(imagenEnt)
# Red
R = core[:,:,0]
# Green
G = core[:,:,1]
# Blue
B = core[:,:,2]

# Umbralización
# Green
mask = R
umbral = 255
mask[G <= umbral] = 0
# Blue
mask = B
mask[G <= umbral] = 0

# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
print("\n\nnucleos celulares")
cv2_imshow(resultado)



# celulas
celulas = np.copy(imagenEnt)
# Red
R = celulas[:,:,0]
# Green
G = celulas[:,:,1]
# Blue
B = celulas[:,:,2]

# Umbralización
# Blue
mask = B
umbral = 255
mask[R >= 150] = 0
# Red
mask = R
mask[B <= umbral] = 0
# Green
mask = G
mask[B <= umbral] = 0

# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
print("\n\ncelulas")
cv2_imshow(resultado)

"""# RGB
Medula espinal
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/medulaespinal.jpg',cv2.IMREAD_COLOR)
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# celulas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:,:,0]
# Green
G = endosoma[:,:,1]
# Blue
B = endosoma[:,:,2]

colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)

# Umbralización
mask = G
umbral = 255
mask[R <= umbral] = 0

mask = B
umbral = 211
mask[R >= umbral] = 0

mask = R
umbral = 0
mask[B == umbral] = 0

# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
print("\n\ncelulas")
cv2_imshow(resultado)



# aglomeracion en las celulas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:,:,0]
# Green
G = endosoma[:,:,1]
# Blue
B = endosoma[:,:,2]

# Umbralización
mask = R
umbral = 30
mask[G >= umbral] = 0

mask = B
mask[G >= umbral] = 0

mask = G
umbral = 255
mask[G <= umbral] = 0

# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
print("\n\naglomeración en las celulas")
cv2_imshow(resultado)

"""# HSV
Clase 12/10/22
Ejercicio Galletas
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow
from skimage.measure import label

imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/galletas.jpg',cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
imagen = cv2.cvtColor(imagen, cv2.COLOR_RGB2HSV)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

img = label(imagen)
cv2_imshow(img)

# Red
R = imagenEnt[:,:,0]
R[R<= 50] = 255
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)


# Umbralización
# Red
mask = B
umbral = 65
mask[R < umbral] = 0
mask[R >= umbral] = 255
# Green
mask = R
mask[R < umbral] = 0
mask[R >= umbral] = 255
# Blue
mask = G
mask[R < umbral] = 0
mask[R >= umbral] = 255

# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
cv2_imshow(resultado)

"""# HSV
Ejercicio Galletas sin migajas
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow


imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/galletas.jpg',cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
imagen = cv2.cvtColor(imagen, cv2.COLOR_RGB2HSV)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# Red
R = imagenEnt[:,:,0]
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)


# Umbralización
# Blue
mask = B
mask[(R>= 48)&(R<= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Green
mask = G
mask[(R>= 48)&(R<= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Red
mask = R
mask[(R>= 48)&(R<= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Blue
mask = R
mask[G < 255] = 0



# Mostrar resultado
resultado = (np.dstack((R,G,B))).astype(np.float64)
cv2_imshow(resultado)

"""# LAB
Mostrar canales en LAB
"""

from types import GeneratorType
import numpy as np

import math

# Importar el módulo cv2 de la librería opencv
import cv2
from google.colab.patches import cv2_imshow


imagen = cv2.imread('/content/drive/MyDrive/vision_artificial/images/galletas.jpg',cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2LAB)

## Aqui separe las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
cv2_imshow(imagenEnt)

# Red
R = imagenEnt[:,:,0]
# Green
G = imagenEnt[:,:,1]
# Blue
B = imagenEnt[:,:,2]


colorComps = cv2.hconcat((R,G,B)) # Para ver las componentes de color por separado.
cv2_imshow(colorComps)