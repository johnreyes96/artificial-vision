# -*- coding: utf-8 -*-
"""RGBvsHSVvsLAB.ipynb

Automatically generated by Colaboratory.
"""

from skimage.measure import label
import matplotlib.pyplot as plt
import numpy as np
import cv2


"""
BGR
Ejercicio células
"""
imagen = cv2.imread('../../data/celulas.png', cv2.IMREAD_COLOR)
img_in = imagen.copy()
img_in = cv2.cvtColor(img_in, cv2.COLOR_BGR2RGB)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
plt.imshow(img_in, cmap="gray")
# plt.show()

# Red
R = imagenEnt[:, :, 0]
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorComps = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorComps, cmap="gray")
plt.savefig("../../output/celulas_components.png")
# plt.show()

# Umbralización
# Green
mask = R
umbral = 255
mask[G <= umbral] = 0

mask = B
umbral = 255
mask[B >= umbral] = 0

mask = G
umbral = 200
mask[B >= umbral] = 255

# Mostrar resultado
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/celulas_BGR.png")
# plt.show()


"""
BGR
Ejercicio 2 células
"""
imagen = cv2.imread('../../data/celulas.png', cv2.IMREAD_COLOR)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)

# Red
R = imagenEnt[:, :, 0]
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorComps = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.)

# Umbralización
mask = R
umbral = 255
mask[G <= umbral] = 0

mask = B
umbral = 30
mask[G <= umbral] = 0

mask = G
umbral = 210
mask[(B > umbral) & (G <= 210)] = 150

# Mostrar resultado
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/celulas_BGR_2.png")
# plt.show()


"""
RGB
Ejercicio de los bananos
"""
imagen = cv2.imread('../../data/bananos.png', cv2.IMREAD_COLOR)
plt.imshow(imagen, cmap="gray")
# plt.show()
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)

# Red
R = imagenEnt[:, :, 0]
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorCompsRGB = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsRGB, cmap="gray")
plt.savefig("../../output/bananos_components.png")
# plt.show()

# Umbralización
mask = R
umbral = 110
mask[B > umbral] = 0
mask[B <= umbral] = 255

mask = G
mask[B > umbral] = 0
mask[B <= umbral] = 255

mask = B
mask[B <= umbral] = 255
mask[B > umbral] = 0
mask[G == 255] = 255

# Mostrar resultado
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/bananos_RGB.png")
# plt.show()


"""
RGB
Ejercicio de los endosomas
"""
imagen = cv2.imread('../../data/endosomas.jpg', cv2.IMREAD_COLOR)
print("Imagen original")
plt.imshow(imagen, cmap="gray")
# plt.show()
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)

# Endosomas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:, :, 0]
# Green
G = endosoma[:, :, 1]
# Blue
B = endosoma[:, :, 2]

colorCompsRGB = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsRGB, cmap="gray")
plt.savefig("../../output/endosomas_components.jpg")
# plt.show()

# Umbralización
# Green
mask = G
umbral = 255
mask[R <= umbral] = 0
# Blue
mask = B
mask[R <= umbral] = 0
mask[R > 125] = 255

# Mostrar resultado
print("\n\nEndosomas")
resultado = np.dstack((R, G, B)).astype(np.uint8)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/endosomas_endosomas_RGB.jpg")
# plt.show()

# Endosomas
core = np.copy(imagenEnt)
# Red
R = core[:, :, 0]
# Green
G = core[:, :, 1]
# Blue
B = core[:, :, 2]

# Umbralización
# Green
mask = R
umbral = 255
mask[G <= umbral] = 0
# Blue
mask = B
mask[G <= umbral] = 0

# Mostrar resultado
print("\n\nnucleos celulares")
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/endosomas_nucleos_celulares_RGB.jpg")
# plt.show()

# celulas
celulas = np.copy(imagenEnt)
# Red
R = celulas[:, :, 0]
# Green
G = celulas[:, :, 1]
# Blue
B = celulas[:, :, 2]

# Umbralización
# Blue
mask = B
umbral = 255
mask[R >= 150] = 0
# Red
mask = R
mask[B <= umbral] = 0
# Green
mask = G
mask[B <= umbral] = 0

# Mostrar resultado
print("\n\ncelulas")
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/endosomas_celulas_RGB.jpg")
# plt.show()


"""
RGB
Medula espinal
"""
imagen = cv2.imread('../../data/medulaespinal.jpg', cv2.IMREAD_COLOR)
plt.imshow(imagen, cmap="gray")
# plt.show()
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)

# celulas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:, :, 0]
# Green
G = endosoma[:, :, 1]
# Blue
B = endosoma[:, :, 2]

colorCompsRGB = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsRGB, cmap="gray")
plt.savefig("../../output/medulaespinal_components.jpg")
# plt.show()

# Umbralización
mask = G
umbral = 255
mask[R <= umbral] = 0

mask = B
umbral = 211
mask[R >= umbral] = 0

mask = R
umbral = 0
mask[B == umbral] = 0

# Mostrar resultado)
print("\n\ncelulas")
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/medulaespinal_celulas_RGB.jpg")
# plt.show()

# aglomeracion en las celulas
endosoma = np.copy(imagenEnt)
# Red
R = endosoma[:, :, 0]
# Green
G = endosoma[:, :, 1]
# Blue
B = endosoma[:, :, 2]

# Umbralización
mask = R
umbral = 30
mask[G >= umbral] = 0

mask = B
mask[G >= umbral] = 0

mask = G
umbral = 255
mask[G <= umbral] = 0

# Mostrar resultado
print("\n\naglomeración en las celulas")
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/medulaespinal_aglomeracion_celulas_RGB.jpg")
# plt.show()


"""
HSV
Ejercicio Galletas
"""
imagen = cv2.imread('../../data/galletas.jpg', cv2.IMREAD_COLOR)
imagen = cv2.cvtColor(imagen, cv2.COLOR_RGB2HSV)

# Aquí separa las componentes de color en cada uno de los canales HSV
imagenEnt = imagen.astype(np.float64)
plt.imshow(imagenEnt, cmap="gray")
# plt.show()  # TODO: improvement visualization

img = label(imagen)
plt.imshow(img, cmap="gray")
# plt.show()  # TODO: improvement visualization

# Red
R = imagenEnt[:, :, 0]
R[R <= 50] = 255
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorCompsHSV = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsHSV, cmap="gray")
plt.savefig("../../output/galletas_components.jpg")
# plt.show()

# Umbralización
# Red
mask = B
umbral = 65
mask[R < umbral] = 0
mask[R >= umbral] = 255
# Green
mask = R
mask[R < umbral] = 0
mask[R >= umbral] = 255
# Blue
mask = G
mask[R < umbral] = 0
mask[R >= umbral] = 255

# Mostrar resultado
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/galletas_HSV.jpg")
# plt.show()


"""
HSV
Ejercicio Galletas sin migajas
"""
imagen = cv2.imread('../../data/galletas.jpg', cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
imagen = cv2.cvtColor(imagen, cv2.COLOR_RGB2HSV)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
plt.imshow(imagenEnt, cmap="gray")
# plt.show()  # TODO: improvement visualization

# Red
R = imagenEnt[:, :, 0]
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorCompsHSV = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsHSV, cmap="gray")
plt.savefig("../../output/galletas_components_2.jpg")
# plt.show()

# Umbralización
# Blue
mask = B
mask[(R >= 48) & (R <= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Green
mask = G
mask[(R >= 48) & (R <= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Red
mask = R
mask[(R >= 48) & (R <= 80)] = 0
mask[R < 48] = 255
mask[R > 80] = 255
# Blue
mask = R
mask[G < 255] = 0

# Mostrar resultado
resultado = np.dstack((R, G, B)).astype(np.uint8)
resultado = cv2.cvtColor(resultado, cv2.COLOR_BGR2RGB)
plt.imshow(resultado, cmap="gray")
plt.savefig("../../output/galletas_HSV_2.jpg")
# plt.show()


"""
LAB
Mostrar canales en LAB
"""
imagen = cv2.imread('../../data/galletas.jpg', cv2.IMREAD_COLOR)
# imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2LAB)

# Aquí separa las componentes de color en cada uno de los canales RGB
imagenEnt = imagen.astype(np.float64)
plt.imshow(imagenEnt, cmap="gray")
plt.show()  # TODO: improvement visualization

# Red
R = imagenEnt[:, :, 0]
# Green
G = imagenEnt[:, :, 1]
# Blue
B = imagenEnt[:, :, 2]

colorCompsHSV = cv2.hconcat((R, G, B))  # Para ver las componentes de color por separado.
plt.imshow(colorCompsHSV, cmap="gray")
plt.savefig("../../output/galletas_components_3.jpg")
plt.show()
